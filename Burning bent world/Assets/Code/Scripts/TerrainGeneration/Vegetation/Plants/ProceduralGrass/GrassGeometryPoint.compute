#pragma kernel InitializeGrass

#include "Simplex.compute"
#include "Random.cginc"

RWStructuredBuffer<float3> _GrassDataBuffer;
RWStructuredBuffer<int> _GrassIndicesBuffer;
Texture2D _GrassMap;
SamplerState sampler_GrassMap;

int _Dimension, _MaxGrassCount;
float _DisplacementStrength;

[numthreads(8,8,1)]
void InitializeGrass(uint3 id : SV_DispatchThreadID) {
    if (id.x < uint(_Dimension) && id.y < uint(_Dimension)) {
        float3 pos = 0.0f;
        pos.xz = id.xy;

        pos.x += snoise(float3(pos.xz, 0.0f) * 3.0f) * 0.5f;
        pos.z += snoise(float3(pos.xz, 0.0f) * 4.0f) * 0.5f;

        float2 uv = pos.xz;
        uv = id.xy;
        uv.y = 1 - uv.y;
        uv.x = 1 - uv.x;

        // Collect info from the map
        float4 mapinfo = _GrassMap.SampleLevel(sampler_GrassMap, uv, 0);
        // Get the grass density from the green value of the sampled texture
        float density = mapinfo.g;
        // Compute number of grass
        float grassCount = int(_MaxGrassCount * density);
        
        for (uint i = 0; i < grassCount; i++)
        {
            // Get the height of the grass from the red value fo the sampled texture
            pos.y += mapinfo.r * _DisplacementStrength + 0.01f;

            // Put vertex info in the grass buffer
            _GrassDataBuffer[
                (id.x + id.y * _Dimension) * _MaxGrassCount + i
            ] = pos;
            
            _GrassIndicesBuffer[
                (id.x + id.y * _Dimension) * _MaxGrassCount + i
            ] = (id.x + id.y * _Dimension) * _MaxGrassCount + i;
        }
    }
}